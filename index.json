{
  "api/XRC.Students.Voice2Action.Embeddings.html": {
    "href": "api/XRC.Students.Voice2Action.Embeddings.html",
    "title": "Class Embeddings | XRC Students Voice2Action",
    "keywords": "Class Embeddings Storage class for all property mappings and initialization of all required components of Voice2Action (except function calling). Fields in this class should be updated as soon as the scene starts, and they are used when function calling with similarity match is attached. Details: When the system recognizes that the user's instruction (1) contains one of the mappings declared here, it matches the closest key in that dictionary, which maps to the actual type/instance in the game engine. Users can add their own property mappings by inheriting this class, see MyEmbeddings class for details as provided in the CityDemo scripts. For (1) to work, functions need to be attached with a custom PropertyMethodAttribute with the name of the property mappings, so that the system can recognize the user's instruction by fetching this attribute during reflection, see readme for example usage. Inheritance Object Embeddings Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class Embeddings : MonoBehaviour Remarks This class is expected to be actual embedding vector matches in future package version, right now it is an under-optimized version by explicit rankings. Fields k_DefaultShape Declaration public const string k_DefaultShape = \"object\" Field Value Type Description String The default object type. Properties shapeMap Stores object types, used for reflection in PropertyExecutor atomic functions. When the scene starts, all object types under the \"Parent Interactable\" hierarchy of the VoiceIntentController class should be loaded. e.g. User: \"make the car bigger\" -> \"car\" object type is matched. Declaration public Dictionary<string, object> shapeMap { get; set; } Property Value Type Description Dictionary < String , Object > Object type property mapping. Remarks This functionality is expected to be implemented with vision model, so the system can recognize object types by their visual appearance. We will add that in future package version. Methods InitInteractable(GameObject, Type) Initializes the default components of the given parent interactable in the scene. By default, this class initialize all object types under the given parent interactable by checking each children's object name. Hence, the default behavior is that each children object is expected to contain all objects with the same type (shape). User can choose to not use this, however, by doing it differently in InitMyInteractable(...). Declaration public void InitInteractable(GameObject parentInteractable, Type myShapeControllerType) Parameters Type Name Description GameObject parentInteractable Default game object that holds all interactable targets. Type myShapeControllerType Type of user-defined ShapeController. InitMyInteractable(GameObject, GameObject, Type) Initializes user-defined components of the given parent interactable in the scene. The function is intentionally left blank so the user can override it, see CityDemo.Scripts.MyEmbeddings for its example usage. Declaration public virtual void InitMyInteractable(GameObject defaultParentInteractable, GameObject myParentInteractable, Type myShapeControllerType) Parameters Type Name Description GameObject defaultParentInteractable Default game object that holds all interactable targets. GameObject myParentInteractable Optional (can be null), user-defined game object that holds all interactable targets. Type myShapeControllerType Type of user-defined ShapeController. InitProperty(PropertyClassifier, PropertyExtractor, PropertyExecutor) The entry point for initializing all property LLMs (large language models). This class is intentionally left blank so user can override it, see CityDemo.Scripts.MyEmbeddings for its example usage. Declaration public virtual void InitProperty(PropertyClassifier classifier, PropertyExtractor extractor, PropertyExecutor executor) Parameters Type Name Description PropertyClassifier classifier The \"LLM for Classification\". PropertyExtractor extractor The \"LLM for Extraction\". PropertyExecutor executor The \"LLM for Execution\"."
  },
  "api/XRC.Students.Voice2Action.html": {
    "href": "api/XRC.Students.Voice2Action.html",
    "title": "Namespace XRC.Students.Voice2Action | XRC Students Voice2Action",
    "keywords": "Namespace XRC.Students.Voice2Action Classes Embeddings Storage class for all property mappings and initialization of all required components of Voice2Action (except function calling). Fields in this class should be updated as soon as the scene starts, and they are used when function calling with similarity match is attached. Details: When the system recognizes that the user's instruction (1) contains one of the mappings declared here, it matches the closest key in that dictionary, which maps to the actual type/instance in the game engine. Users can add their own property mappings by inheriting this class, see MyEmbeddings class for details as provided in the CityDemo scripts. For (1) to work, functions need to be attached with a custom PropertyMethodAttribute with the name of the property mappings, so that the system can recognize the user's instruction by fetching this attribute during reflection, see readme for example usage. InteractableTarget Implements proxy manipulation in Expand. When the user hovers enter the proxy object, an information panel will be displayed to show the status of the actual game object. The user can customize the display by overriding (My)ShapeController.GetShapeInfo(...). PropertyClassifier A minimal implementation of the \"LLM for Classification\" step in Voice2Action. This implementation is not optimized and only used for inference. We will add action class generation and alignment training via order ranking of the model in future package version. PropertyExecutor A minimal implementation of the \"LLM for Execution\" step in Voice2Action. This implementation is not optimized and only used for inference. We will add reward modeling, atomic function generation and alignment training via user feedback of the model in future package version. PropertyExtractor A minimal implementation of the \"LLM for Extraction\" step in Voice2Action. This implementation is not optimized and only used for inference. We will add atomic action property generation, alignment training via order ranking and environment feedback of the model in future package version. SceneManager The main class of Expand, contains all core required components for the system. After Voice2Action executes the user's instructions, objects that got their status modified (i.e. selected) will fly onto the ExpandPanel. Other objects that are not modified will become transparent and non-interactable. Pressing the primary button on the RightRayInteractor will reset this step. ShapeController Stores all actual implementations of the atomic function and attributes, must ALL be public for reflection. Stores all interactable properties of the attached game objects for Voice2Action to manipulate with. ShapeController.PropertyMethodAttribute Used for specifying atomic functions that are doing embedding matches. i.e. Suppose there is a function that does FindObjectWithProperty(property), where property belongs to a list of discrete candidates (we will call them propertyMappings). Then this attribute is used to specify what the propertyMappings are. See GetShape(...) below for its usage and their corresponding propertyMappings in Embeddings. ShapeController.PropertyParameterAttribute Used for customizing the behavior of certain parameters in atomic functions. Utils Stores all singleton fields, global constants, and utility functions. VoiceIntentController The main class of Voice2Action, contains all core required components for the system. This class is not inheritable, instead, the user wants to inherit each individual components for customizable behaviors. This is a minimal implementation, we will add function re-ordering, rejection sampling, and alignment training with environment and user feedback in future package version. The \"LLM for Pre-Processing\" step in Voice2Action is omitted here by adapting OpenAI Whisper voice recognition. Structs PropertyExecutor.FunctionCallGroup A group containing essential elements for executing a property function. PropertyExecutor.FunctionParamGroup A group containing essential elements for one function parameter. Utils.FewShotGroup A group containing essential prompting elements for few-shot prompting. Utils.FewShotPair A few shot example input and output pair to the model."
  },
  "api/XRC.Students.Voice2Action.InteractableTarget.html": {
    "href": "api/XRC.Students.Voice2Action.InteractableTarget.html",
    "title": "Class InteractableTarget | XRC Students Voice2Action",
    "keywords": "Class InteractableTarget Implements proxy manipulation in Expand. When the user hovers enter the proxy object, an information panel will be displayed to show the status of the actual game object. The user can customize the display by overriding (My)ShapeController.GetShapeInfo(...). Inheritance Object InteractableTarget Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class InteractableTarget : MonoBehaviour Properties isProxy Declaration public bool isProxy { get; set; } Property Value Type Description Boolean Checks if the Interactable Target is a proxy object originObject Declaration public Transform originObject { get; } Property Value Type Description Transform Stores the transform value of the original object of the interactable target sceneManager Declaration public static SceneManager sceneManager { get; set; } Property Value Type Description SceneManager The Scene Manager instance Methods MakeProxy() Creates a proxy object of the Interactable Target. Declaration public ShapeController MakeProxy() Returns Type Description ShapeController The shape controller of the proxy game object. SetVariablesForLerp(Vector3) Sets the variables (original position, target position, and isLerp) for calculation of Vector for Lerp. Declaration public void SetVariablesForLerp(Vector3 position) Parameters Type Name Description Vector3 position Target position the Proxy object should Lerp to"
  },
  "api/XRC.Students.Voice2Action.PropertyClassifier.html": {
    "href": "api/XRC.Students.Voice2Action.PropertyClassifier.html",
    "title": "Class PropertyClassifier | XRC Students Voice2Action",
    "keywords": "Class PropertyClassifier A minimal implementation of the \"LLM for Classification\" step in Voice2Action. This implementation is not optimized and only used for inference. We will add action class generation and alignment training via order ranking of the model in future package version. Inheritance Object PropertyClassifier Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class PropertyClassifier : MonoBehaviour Fields k_ClassificationInstruction Declaration public const string k_ClassificationInstruction = \"You classify user input into exactly one category from the given categories. No explanation.\" Field Value Type Description String System instruction for the classification model. Properties classificationGroup Declaration public Utils.FewShotGroup classificationGroup { get; set; } Property Value Type Description Utils.FewShotGroup Contains the available action classes to interact with for classification and their example usage. Examples Extract actions \"select, modify\" from the input, separate by comma. If some actions do not exist, do not print anything. Input: {input examples} Output: {output examples} ... {add some more if there's budget} Input: {userInput} Output: Methods AddAction(Int32, String) Add new action class to the classifier, used for customized actions. The user may also want to AddClassificationExamples(...) to ensure accurate results. Declaration public void AddAction(int order, string newAction) Parameters Type Name Description Int32 order Order of extraction of the new action. String newAction New action to add. AddClassificationExamples(String, String) Add new classification examples to the system, used when user adds customized actions. Declaration public void AddClassificationExamples(string input, string output) Parameters Type Name Description String input Example user instruction. String output Example desired model output. ClassifyProperty(String) Classify and extract phrases in user instruction that corresponds to each defined action class. Declaration public async Task<Dictionary<string, string>> ClassifyProperty(string userInput) Parameters Type Name Description String userInput Input user instruction. Returns Type Description Task < Dictionary < String , String >> A dictionary of pairs (targetClass, targetPhrases) {targetClass} are like \"select\", \"modify\", etc. {targetPhrases} are like \"select the tallest building\", \"make it super short\", etc. GetClassificationPrompt(String, List<String>) Declaration public static string GetClassificationPrompt(string userInput, List<string> targets) Parameters Type Name Description String userInput Original user input instruction. List < String > targets Classes to classify user input into. Returns Type Description String Formatted classification input."
  },
  "api/XRC.Students.Voice2Action.PropertyExecutor.FunctionCallGroup.html": {
    "href": "api/XRC.Students.Voice2Action.PropertyExecutor.FunctionCallGroup.html",
    "title": "Struct PropertyExecutor.FunctionCallGroup | XRC Students Voice2Action",
    "keywords": "Struct PropertyExecutor.FunctionCallGroup A group containing essential elements for executing a property function. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax [Serializable] public struct FunctionCallGroup Constructors FunctionCallGroup(String, String, List<PropertyExecutor.FunctionParamGroup>) Declaration public FunctionCallGroup(string functionName, string functionDescription, List<PropertyExecutor.FunctionParamGroup> functionParams = null) Parameters Type Name Description String functionName Function name, i.e. MyFunctionName(...) String functionDescription Function description, a summarization of its functionality. List < PropertyExecutor.FunctionParamGroup > functionParams Optional, function parameters, nested with all of their information. Properties description Declaration public string description { get; set; } Property Value Type Description String Function description. name Declaration public string name { get; set; } Property Value Type Description String Function name. paramGroups Declaration public List<PropertyExecutor.FunctionParamGroup> paramGroups { get; set; } Property Value Type Description List < PropertyExecutor.FunctionParamGroup > Optional, function parameters. Methods AddParamsRequirement(ref JObject) Add the \"required\" key in the given JsonSchema. Declaration public void AddParamsRequirement(ref JObject funcObject) Parameters Type Name Description JObject funcObject The JsonSchema of the current property function, will be updated upon execution of this method. PrettyPrintFunctionCall(MethodInfo, Object[]) Declaration public static string PrettyPrintFunctionCall(MethodInfo methodInfo, object[] inputs) Parameters Type Name Description MethodInfo methodInfo Information of current property function through reflection. Object [] inputs Function arguments. Returns Type Description String A string as if the function is called, i.e. \"MyFunctionName(MyArgType1 MyArg1, MyArgType2 MyArg2, ...)\""
  },
  "api/XRC.Students.Voice2Action.PropertyExecutor.FunctionParamGroup.html": {
    "href": "api/XRC.Students.Voice2Action.PropertyExecutor.FunctionParamGroup.html",
    "title": "Struct PropertyExecutor.FunctionParamGroup | XRC Students Voice2Action",
    "keywords": "Struct PropertyExecutor.FunctionParamGroup A group containing essential elements for one function parameter. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax [Serializable] public struct FunctionParamGroup Constructors FunctionParamGroup(String, Boolean, String, List<Utils.FewShotPair>) Declaration public FunctionParamGroup(string paramName, bool paramRequired = false, string paramDescription = null, List<Utils.FewShotPair> paramExamples = null) Parameters Type Name Description String paramName Function parameter name. Boolean paramRequired Whether this parameter is required, default to False. String paramDescription Optional, function parameter description, a summarization of its usage. List < Utils.FewShotPair > paramExamples Optional, list of few-shot example (input, output) pair provided to the model. Properties description Declaration public string description { get; set; } Property Value Type Description String Optional, function parameter description. examples Declaration public List<Utils.FewShotPair> examples { get; set; } Property Value Type Description List < Utils.FewShotPair > Optional, list of few-shot example (input, output) pair provided to the model as illustration to the parameter is used. name Declaration public string name { get; set; } Property Value Type Description String Function parameter name. paramTypeJsons Declaration public static Dictionary<Type, JObject> paramTypeJsons { get; set; } Property Value Type Description Dictionary < Type , JObject > Pre-defined (function type, JsonSchema template) mappings for OpenAI API, user can add customized mapping by updating this field. required Declaration public bool required { get; set; } Property Value Type Description Boolean Whether this parameter is required, default to False. Methods TryAddParamInfo(ref JObject) Try to add current parameter information to a (possibly empty) JsonSchema. Declaration public bool TryAddParamInfo(ref JObject paramsObject) Parameters Type Name Description JObject paramsObject The JsonSchema of the property function that the current parameter is attached to, will be updated upon execution of this method. Returns Type Description Boolean Whether the JsonSchema is updated successfully."
  },
  "api/XRC.Students.Voice2Action.PropertyExecutor.html": {
    "href": "api/XRC.Students.Voice2Action.PropertyExecutor.html",
    "title": "Class PropertyExecutor | XRC Students Voice2Action",
    "keywords": "Class PropertyExecutor A minimal implementation of the \"LLM for Execution\" step in Voice2Action. This implementation is not optimized and only used for inference. We will add reward modeling, atomic function generation and alignment training via user feedback of the model in future package version. Inheritance Object PropertyExecutor Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class PropertyExecutor : MonoBehaviour Fields k_ExecutionInstruction Declaration public const string k_ExecutionInstruction = \"You convert instructions to structured function calls. Your response must contain only the provided functions.\" Field Value Type Description String System instruction for the execution model. Properties functionCallGroups Declaration public List<PropertyExecutor.FunctionCallGroup> functionCallGroups { get; set; } Property Value Type Description List < PropertyExecutor.FunctionCallGroup > Contains atomic property functions for the model to use, along with function and parameter description and their example usage. Methods ExecuteProperty(OrderedDictionary, Dictionary<String, Tool>, Type, ShapeController[], Boolean[], Type, Embeddings, List<String>) Execute atomic property functions on given objects (controllers) and update their states (attributes). Declaration public async Task<bool[]> ExecuteProperty(OrderedDictionary propertyDict, Dictionary<string, Tool> toolDict, Type myShapeControllerType, ShapeController[] allControllers, bool[] selectedControllers, Type myEmbeddingsType, Embeddings embeddings, List<string> historyMessages) Parameters Type Name Description OrderedDictionary propertyDict Ordered dictionary of pairs (targetProperty, targetFeatures) in their execution order. {targetProperty} are like \"shape\", \"distance\", \"direction\", etc. {targetFeatures} are like \"cube\", \"5 meters\", \"on my left\", etc. Dictionary < String , Tool > toolDict A dictionary of function name to property function JsonSchema mappings. Type myShapeControllerType Type of user-defined ShapeController, used for checking function existence. ShapeController [] allControllers All candidate objects that function calls can be performed on. Boolean [] selectedControllers Selected object indexes that function calls are actually performed on. Type myEmbeddingsType Type of user-defined Embeddings, used for checking attributes for function arguments validity. Embeddings embeddings Stores all candidate attributes for function calling. List < String > historyMessages Visualization. Returns Type Description Task < Boolean []> Filtered object indexes that function calls are successfully executed on. InitFunctionCalls(Type, List<String>) Initializes all atomic property functions to OpenAI API supported format (JsonSchema). Declaration public Dictionary<string, Tool> InitFunctionCalls(Type myShapeControllerType, List<string> propertyFunctionNames) Parameters Type Name Description Type myShapeControllerType Type of user-defined ShapeController, used to check existence of atomic property functions. List < String > propertyFunctionNames Names of property functions. Returns Type Description Dictionary < String , Tool > A dictionary where key = functionName, value = corresponding JsonSchema of the function."
  },
  "api/XRC.Students.Voice2Action.PropertyExtractor.html": {
    "href": "api/XRC.Students.Voice2Action.PropertyExtractor.html",
    "title": "Class PropertyExtractor | XRC Students Voice2Action",
    "keywords": "Class PropertyExtractor A minimal implementation of the \"LLM for Extraction\" step in Voice2Action. This implementation is not optimized and only used for inference. We will add atomic action property generation, alignment training via order ranking and environment feedback of the model in future package version. Inheritance Object PropertyExtractor Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class PropertyExtractor : MonoBehaviour Properties modificationGroup Declaration public Utils.FewShotGroup modificationGroup { get; set; } Property Value Type Description Utils.FewShotGroup Contains the available atomic action properties to interact with for modification and their example usage. Examples Extract actions {\"ModifyColor\", \"ModifyScale\", \"ModifyPosition\"} from the input, separate by comma. If some actions do not exist, do not print anything. Input: {more input examples} Output: {more output examples} ... {add some more if there's budget} Input: {userInput} Output: selectionGroup Declaration public Utils.FewShotGroup selectionGroup { get; set; } Property Value Type Description Utils.FewShotGroup Contains the available atomic action properties to interact with for selection and their example usage. Examples Extract actions {\"GetShape\", \"GetColor\", \"GetDirection\", \"GetDistance\", \"GetSuperlative\"} from the input, separate by comma. If some actions do not exist, do not print anything. Input: {more input examples} Output: {more output examples} ... {add some more if there's budget} Input: {userInput} Output: Methods AddAtomicAction(String, Int32, String) Add new atomic action property to the extractor, used for customized properties. The user may also want to AddExtractExamples(...) to ensure accurate results. Declaration public void AddAtomicAction(string action, int order, string newAtomicAction) Parameters Type Name Description String action The action that newAtomicAction belongs to. Int32 order Order of extraction of the new atomic action. String newAtomicAction The new atomic action. AddExtractionExamples(String, String, String) Add new extraction examples to the system, used when user adds customized atomic actions. Declaration public void AddExtractionExamples(string action, string input, string output) Parameters Type Name Description String action The action that the extraction example belongs to. String input Example user instruction. String output Example desired model output. ExtractProperty(String, String) Extract property mappings in user instruction that corresponds to each defined atomic action class. Declaration public async Task<OrderedDictionary> ExtractProperty(string action, string userInput) Parameters Type Name Description String action The action class that the userInput belongs to. String userInput Input user instruction. Returns Type Description Task < OrderedDictionary > Ordered dictionary of pairs (targetProperty, targetFeatures) in their execution order. {targetProperty} are like \"shape\", \"distance\", \"direction\", etc. {targetFeatures} are like \"cube\", \"5 meters\", \"on my left\", etc."
  },
  "api/XRC.Students.Voice2Action.SceneManager.html": {
    "href": "api/XRC.Students.Voice2Action.SceneManager.html",
    "title": "Class SceneManager | XRC Students Voice2Action",
    "keywords": "Class SceneManager The main class of Expand, contains all core required components for the system. After Voice2Action executes the user's instructions, objects that got their status modified (i.e. selected) will fly onto the ExpandPanel. Other objects that are not modified will become transparent and non-interactable. Pressing the primary button on the RightRayInteractor will reset this step. Inheritance Object SceneManager Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class SceneManager : MonoBehaviour Fields k_MaxExpandNum Declaration public const int k_MaxExpandNum = 8 Field Value Type Description Int32 Maximum number of objects that are expanded and displayed on the Expand Panel Properties expandPanel Declaration public GameObject expandPanel { get; set; } Property Value Type Description GameObject The Expand Panel that holds and displays all the expanded objects xrOriginCamera Declaration public Camera xrOriginCamera { get; set; } Property Value Type Description Camera XROrigin Camera Methods AddExpandingAndProxy(ShapeController) Add original and proxy object in this function, at the end of the frame, it would lerp all proxy object in front of users. Declaration public void AddExpandingAndProxy(ShapeController original) Parameters Type Name Description ShapeController original original ShapeController ClearProxies() Destroy all proxy objects. Declaration public void ClearProxies() NotifyActivated(Transform) Tell the sceneManager, some InteractableTarget is being activated. Declaration public void NotifyActivated(Transform otherTransform) Parameters Type Name Description Transform otherTransform transform of the object being called, used as the center of expand NotifyProxySelected(Transform) Notify all proxy objects that 1 proxy object is being grabbed, and destroy the rest. Declaration public void NotifyProxySelected(Transform grabbedProxyObject) Parameters Type Name Description Transform grabbedProxyObject Transform of be proxy object being grabbed Events activateInteractable Declaration public event Action<Transform> activateInteractable Event Type Type Description Action < Transform > Invoked when one object is being activated. When invoked, it will call all InteractableTarget's expand_response. destroyObjectNotGrabbed Declaration public event Action<Transform> destroyObjectNotGrabbed Event Type Type Description Action < Transform > Invoked when one proxy is grabbed, to destroy all other proxy"
  },
  "api/XRC.Students.Voice2Action.ShapeController.html": {
    "href": "api/XRC.Students.Voice2Action.ShapeController.html",
    "title": "Class ShapeController | XRC Students Voice2Action",
    "keywords": "Class ShapeController Stores all actual implementations of the atomic function and attributes, must ALL be public for reflection. Stores all interactable properties of the attached game objects for Voice2Action to manipulate with. Inheritance Object ShapeController Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class ShapeController : MonoBehaviour Properties grabInteractable Declaration public XRGrabInteractable grabInteractable { get; } Property Value Type Description XRGrabInteractable Pointer to a required game component for Expand (Spin In-and-Out). interactableTarget Declaration public InteractableTarget interactableTarget { get; } Property Value Type Description InteractableTarget Pointer to a required game component for Expand (Make Proxy Objects), see InteractableTarget class for details. player Declaration public static GameObject player { get; set; } Property Value Type Description GameObject The game object that represents the user. renderers Declaration public List<Renderer> renderers { get; } Property Value Type Description List < Renderer > All renderers of the attached game objects and its children. shape Declaration public string shape { get; set; } Property Value Type Description String Object type of the attached game object, customizable by the user. shapeCollider Declaration public Collider shapeCollider { get; } Property Value Type Description Collider Collider of the attached game object. Methods AddTransparency(Single) Add Transparency to the game object's material if they exist, used for visualization. Declaration public void AddTransparency(float alpha) Parameters Type Name Description Single alpha Alpha value to set to the material. GetDirection(List<Single>) Select object of certain direction wrt. the user. Declaration public bool GetDirection(List<float> direction) Parameters Type Name Description List < Single > direction 3-DOF direction unit vector. Returns Type Description Boolean Denote selection success. GetDistance(Single, Single) Select object of certain distance ranges wrt. the user. Declaration public bool GetDistance(float start = 0F, float end = 5F) Parameters Type Name Description Single start Start range. Single end End range. Returns Type Description Boolean Denote selection success. GetShape(String) Select object with matching shapes (object types). Declaration [ShapeController.PropertyMethod(\"shapeMap\")] public bool GetShape(string otherShape) Parameters Type Name Description String otherShape The shape to compare to. Returns Type Description Boolean Denote selection success. GetShapeInfo() Declaration public virtual (string, string)[] GetShapeInfo() Returns Type Description (T1, T2) < String , String >[] Selected properties of current game object for visualization, user can customize its behavior by overriding this function. GetSuperlative(ShapeController, List<Int32>, List<Int32>) Select object of certain superlative properties, i.e. biggest -> size, furthest -> position. Declaration public bool GetSuperlative([ShapeController.PropertyParameter(\"compare\")] ShapeController otherController, List<int> size = null, List<int> position = null) Parameters Type Name Description ShapeController otherController The other object to compare to, customized attribute is attached so that the function calling behavior would be modified. List < Int32 > size Denote scale superlative comparator, i.e. [1, -1, 0] means x-axis largest, y-axis smallest, and any z-axis. User can customize its actual usage by implementing the atomic function differently. List < Int32 > position Denote position superlative comparator. Returns Type Description Boolean Denote selection success. InitMyShape() Initializes user-defined properties of the attached game object, needs to be called right after class initialization. Declaration public virtual void InitMyShape() InitShape() Initializes default properties of the attached game object, needs to be called right after class initialization. Declaration public void InitShape() ModifyPosition(Single) Modify the position of current object. Declaration public bool ModifyPosition(float value) Parameters Type Name Description Single value 1-DOF magnitude of modification wrt. to the user. Returns Type Description Boolean Denote modification success. ModifyScale(List<Single>) Modify the scale of current object. Declaration public bool ModifyScale(List<float> size) Parameters Type Name Description List < Single > size 3-DOF Magnitude of modification. Returns Type Description Boolean Denote modification success."
  },
  "api/XRC.Students.Voice2Action.ShapeController.PropertyMethodAttribute.html": {
    "href": "api/XRC.Students.Voice2Action.ShapeController.PropertyMethodAttribute.html",
    "title": "Class ShapeController.PropertyMethodAttribute | XRC Students Voice2Action",
    "keywords": "Class ShapeController.PropertyMethodAttribute Used for specifying atomic functions that are doing embedding matches. i.e. Suppose there is a function that does FindObjectWithProperty(property), where property belongs to a list of discrete candidates (we will call them propertyMappings). Then this attribute is used to specify what the propertyMappings are. See GetShape(...) below for its usage and their corresponding propertyMappings in Embeddings. Inheritance Object Attribute ShapeController.PropertyMethodAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class PropertyMethodAttribute : Attribute, _Attribute Constructors PropertyMethodAttribute(String) Declaration public PropertyMethodAttribute(string property) Parameters Type Name Description String property The name of the propertyMappings field in (My)Embeddings. Properties property Declaration public string property { get; set; } Property Value Type Description String The name of the propertyMappings field in (My)Embeddings, they will be called with reflection during function execution. Implements System.Runtime.InteropServices._Attribute"
  },
  "api/XRC.Students.Voice2Action.ShapeController.PropertyParameterAttribute.html": {
    "href": "api/XRC.Students.Voice2Action.ShapeController.PropertyParameterAttribute.html",
    "title": "Class ShapeController.PropertyParameterAttribute | XRC Students Voice2Action",
    "keywords": "Class ShapeController.PropertyParameterAttribute Used for customizing the behavior of certain parameters in atomic functions. Inheritance Object Attribute ShapeController.PropertyParameterAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class PropertyParameterAttribute : Attribute, _Attribute Constructors PropertyParameterAttribute(String) Declaration public PropertyParameterAttribute(string property) Parameters Type Name Description String property Behavior customization type of parameters. Properties property Declaration public string property { get; set; } Property Value Type Description String Behavior customization type of parameters. Implements System.Runtime.InteropServices._Attribute"
  },
  "api/XRC.Students.Voice2Action.Utils.FewShotGroup.html": {
    "href": "api/XRC.Students.Voice2Action.Utils.FewShotGroup.html",
    "title": "Struct Utils.FewShotGroup | XRC Students Voice2Action",
    "keywords": "Struct Utils.FewShotGroup A group containing essential prompting elements for few-shot prompting. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax [Serializable] public struct FewShotGroup Constructors FewShotGroup(String, List<(Int32, String)>, List<String>, List<Utils.FewShotPair>) Declaration public FewShotGroup(string instruction, List<(int, string)> orderedProperties, List<string> indicators = null, List<Utils.FewShotPair> fewShotPairs = null) Parameters Type Name Description String instruction Specific task or instruction you want the model to perform. This string must contains \"{}\" for properties insertion if it is provided. List < (T1, T2) < Int32 , String >> orderedProperties (Order, Property) pairs you want the model to extract their input from, lower ordered properties are extracted first. List < String > indicators Optional, type or format of the output, or constraints of what the model should not do. List < Utils.FewShotPair > fewShotPairs Optional, list of few-shot example (input, output) pair provided to the model. Properties fewShotPairs Declaration public List<Utils.FewShotPair> fewShotPairs { get; set; } Property Value Type Description List < Utils.FewShotPair > Optional, list of few-shot example (input, output) pair provided to the model as illustration to how it should respond. indicators Declaration public List<string> indicators { get; set; } Property Value Type Description List < String > Optional, type or format of the output, or constraints of what the model should not do. instruction Declaration public string instruction { get; set; } Property Value Type Description String Specific task or instruction you want the model to perform. orders Declaration public List<int> orders { get; } Property Value Type Description List < Int32 > Extraction order of the properties, lower ordered properties are extracted first. properties Declaration public List<string> properties { get; } Property Value Type Description List < String > Properties you want the model to extract from. Methods GetOrderedProperties() Declaration [Obsolete] public List<string> GetOrderedProperties() Returns Type Description List < String > List of ordered properties. GetPrompt(String) Get the full prompt to perform information extraction on the given userInput. Declaration public string GetPrompt(string userInput) Parameters Type Name Description String userInput The given user input instruction. Returns Type Description String The generated full prompt."
  },
  "api/XRC.Students.Voice2Action.Utils.FewShotPair.html": {
    "href": "api/XRC.Students.Voice2Action.Utils.FewShotPair.html",
    "title": "Struct Utils.FewShotPair | XRC Students Voice2Action",
    "keywords": "Struct Utils.FewShotPair A few shot example input and output pair to the model. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax [Serializable] public struct FewShotPair Constructors FewShotPair(String, String) Declaration public FewShotPair(string input, string output) Parameters Type Name Description String input Input user instruction. String output Desired model output. Properties input Declaration public string input { get; set; } Property Value Type Description String Input user instruction. output Declaration public string output { get; set; } Property Value Type Description String Desired model output."
  },
  "api/XRC.Students.Voice2Action.Utils.html": {
    "href": "api/XRC.Students.Voice2Action.Utils.html",
    "title": "Class Utils | XRC Students Voice2Action",
    "keywords": "Class Utils Stores all singleton fields, global constants, and utility functions. Inheritance Object Utils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public static class Utils Fields k_CompletionTemperature Temperature parameter of the OpenAI CompletionAPI, lower means that the output is more deterministic. Declaration public const float k_CompletionTemperature = 0F Field Value Type Description Single Range [0f, 1f]. Remarks This is highly correlated to the functionality of Voice2Action, we recommend not to change it. k_FailureResponse A string to denote model failure state Declaration public const string k_FailureResponse = \"N/A\" Field Value Type Description String \"N/A\" k_MinConfidenceToProceed TODO: we will add similarity match implementation in future package version. Confidence of the system to accept matching in the Embedding class. This is used to determine if there is a match in the property mappings. If the system does not have enough confidence, it rejects the mapping. User can make this bigger if they want a stricter match, or make this lower if they want a looser match. e.g. User: \"change the box to orange\" -> \"yellow\" is matched with {k_MinConfidenceToProceed}% confidence. Declaration public const int k_MinConfidenceToProceed = 50 Field Value Type Description Int32 Range [0, 100]. s_OpenAIModel Declaration public static readonly Model s_OpenAIModel Field Value Type Description Model The base model type used in Voice2Action. Properties openAIClient Declaration public static OpenAIClient openAIClient { get; set; } Property Value Type Description OpenAIClient The entry for all OpenAI API requests."
  },
  "api/XRC.Students.Voice2Action.VoiceIntentController.html": {
    "href": "api/XRC.Students.Voice2Action.VoiceIntentController.html",
    "title": "Class VoiceIntentController | XRC Students Voice2Action",
    "keywords": "Class VoiceIntentController The main class of Voice2Action, contains all core required components for the system. This class is not inheritable, instead, the user wants to inherit each individual components for customizable behaviors. This is a minimal implementation, we will add function re-ordering, rejection sampling, and alignment training with environment and user feedback in future package version. The \"LLM for Pre-Processing\" step in Voice2Action is omitted here by adapting OpenAI Whisper voice recognition. Inheritance Object VoiceIntentController Namespace : XRC.Students.Voice2Action Assembly : cs.temp.dll.dll Syntax public class VoiceIntentController : MonoBehaviour Properties interactable Contains default game objects that the user want to interact with using Voice2Action. To take effect, the user wants to attach it to the actual parent interactable in the Unity hierarchy before the game starts. Declaration public GameObject interactable { get; set; } Property Value Type Description GameObject The default parent interactable. myEmbeddings Contains user-defined fields and attributes for all atomic functions. Also used for customizable behavior in scene initialization. Declaration public Embeddings myEmbeddings { get; set; } Property Value Type Description Embeddings The instance of user-defined Embeddings. myInteractable Contains user-defined game objects that the user want to interact with using Voice2Action. e.g. In CityDemo, this is defined as the parent for all \"Address\" game objects. To take effect, the user wants to attach it to the actual parent interactable in the Unity hierarchy before the game starts. To scale, the user can also put sub-parents under it and call them respectively in the user-defined property classes. Declaration public GameObject myInteractable { get; set; } Property Value Type Description GameObject The customizable parent interactable. myShapeController Contains user-defined interactable properties and actual implementations of all atomic functions. Declaration public ShapeController myShapeController { get; set; } Property Value Type Description ShapeController The instance of user-defined ShapeController. Methods CallCompletion(String, String) Utility function to perform chat completion with the OpenAI API. Declaration public static async Task<string> CallCompletion(string userInput, string systemInput = \"you must follow user instructions.\") Parameters Type Name Description String userInput Input user message String systemInput Input system message Returns Type Description Task < String > Response to input instructions. CallCompletionWithTools(String, List<Tool>) Utility function to perform function execution with the OpenAI API. Declaration public static async Task<string> CallCompletionWithTools(string userInput, List<Tool> tools) Parameters Type Name Description String userInput Input user message List < Tool > tools Json-formatted function declarations Returns Type Description Task < String > Json-formatted function call arguments. UpdateMessageDisplay(String, GameObject) Update the scroll view information. Declaration public static void UpdateMessageDisplay(string message, GameObject parentScrollView) Parameters Type Name Description String message Message to view GameObject parentScrollView Parent game object to append the message to."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | XRC Students Voice2Action",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . <!-- Headers should be listed in this order: Added, Changed, Deprecated, Removed, Fixed, Security --> [0.0.1-preview] - 2024-02-14 This is the first preview of Voice2Action. <!-- ## [0.1.0] - YYYY-MM-DD ### Added - List what new features were added ### Changed - List changes in existing functionality ### Deprecated - List soon-to-be removed features ### Removed - List removed features ### Fixed - List any bug fixes ### Security - List vulnerabilities -->"
  },
  "index.html": {
    "href": "index.html",
    "title": "Voice to Action - Multimodal Interactions with LLM Agents | XRC Students Voice2Action",
    "keywords": "Voice to Action - Multimodal Interactions with LLM Agents Overview This package uses LLMs (Large Language Models) to analyze user instruction through action and entity extraction, and divides the execution tasks into canonical interaction subsets with error prevention from the game engine feedback. It combines an \"Expand\" interaction technique to create an innovative selection and manipulation mechanism for enhanced user experiences. By incorporating this package into your VR project, you can use voice commands to filter through multiple objects, create smaller, scaled-down versions of the original object called \"proxy objects\", and bring the proxy objects into view. When you hover over the proxy object, it will show the user the information of the original object. A raycast will also show the user where the object is located. Users are then able to modify the properties of the filtered objects through customizable voice commands. For the original repository of the package, go to Voice2Action GitHub Repository (Paper & Package) Requirements Unity Version 2022.03 OpenAI UPM Version 7.3.2 Must have OpenAI credentials: API Key and Organization ID Package contents Overview The user input would be sent to a parallelizable series of classes for LLMs to analyze and execute user-defined functions on given interactable targets (game objects) through functional impact analysis and reflection. User can customize the property manipulation categories of game objects by inheriting \"ShapeController.cs\" and customize their usage by inheriting \"Embeddings.cs\". See \"Samples/CityDemo/Scripts/\" and the Advanced section below for more details. Runtime The runtime folder contains the core scripts of this package. There are 2 prefabs that the user wants to put into the scene to use Voice2Action customizably. The Voice2Action Prefab. This prefab contains the core system of Voice2Action. User can put it anywhere they want. The Voice2ActionGUI Prefab. This prefab is for interaction. The user wants to put this prefab to somewhere comfortable, e.g. attach it to the left/right hand controller, as what we do in \"Samples\". Samples \"Starter Assets\" Contains essential prefabs and tutorial scenes of the Voice2Action system Contains two scenes \"StarterScene-Empty\" and \"StarterScene-Complete\" User can use these scenes to become familiar with the system, see the Tutorial section below for more information \"CityDemo\" Contains a scene \"CityScene\" with customized actions and properties User can use this scene for a thorough playthrough of the capabilities and limitations of the system, preparing them for Advanced usage of the system \"CityScene\" uses an urban planning environment to call different buildings, cars, trees, etc. in different directions / locations / streets, and user can modify the colors, sizes, positions of selected objects Installation instructions This package requires a 2-step installation process. Prerequisites (Open AI UPM and XR Interaction Tookit) Navigate to this page and follow the instructions to install the Open AI UPM package: https://openupm.com/packages/com.openai.unity/ Go to Windows > Package Manager > My Registries > OpenAI > Version History to check the OpenAI UPM version is 7.3.2 . If not, update the version (Optional but recommended) Restart your project as OpenAI UPM sometimes has configurations that are only updated after restarting Unity In the Assets folder, create a folder titled \" Resources \". Inside the folder, right click and select Create > OpenAI > OpenAIConfigurations . Enter your API key and organization ID from the OpenAI API user settings. Other fields can be left blank. Go to Windows > Package Manager , install XR Interaction Toolkit Package. In the Samples tab, import \"Starter Assets\" and \"Device Simulator\" Voice2Action Package In the Package Manager, click the \"+\" button on the left-hand corner. Select \"Add package through git URL.\" Add the package link https://github.com/xrc-students/voice2action.git into the URL field. In the Samples tab, import \"Starter Assets\" (Optional) In the Samples tab, you can import CityDemo to see a sample scene of the usage of our package Get Started Open \"Samples/Starter Assets/StarterScene-Complete\" and hit play, make sure there are exactly 10 debug logs - which denotes successful installation. Toggle right controller, Hold B and say \"Select buildings on my left and make them taller\" Make sure you have microphone on! If you see the system output \"you\", it is mostly because that the microphone is not detected. You should see those buildings get filtered and show on the Expand Panel as follows and become taller, if yes, you are good to go! Tutorial Step-by-Step Tutorial Video (1) In \"Stater Assets\", you'll find \"StarterScene-Empty\" and \"StarterScene-Complete\" Follow the following steps to upgrade \"StarterScene-Empty\" to the \"StarterScene-Complete\" version You can use \"StarterScene-Complete\" as a reference to ensure correct completion of the tutorial (2) Place the following prefabs into the Unity Hierarchy. Place Voice2Action anywhere Place Voice2ActionGUI as a child of XR Origin (XR Rig) > Camera Offset > Left Controller (tips: this is for convenience, you can put it anywhere) (3) Create an empty parent gameobject to hold all interactables, name it \"Default Interactable\" (tips: this is for convenience, you can name it anything). Create sub-parent gameobjects and name them the object types that their children will have For example, if your have some \"Buildings\" gameobjects, put them under here - the system will recognize their object types by this name. Let's put some primary cubes as children gameobjects to \"Buildings\", name them anything The following should be your current Hierarchy (except possible difference under \"Default Interactable\") (4) Click on Voice2Action > SceneManager to open its inspector. Attach \"Left/Right Ray Interactor\" to its corresponding gameobject Attach \"XR Origin Camera\" to its corresponding gameobject You want to get the following setup (5) Click on VoiceIntentController to open its inspector. Attach \"Voice2ActionGUIScrollText\" to its corresponding gameobject Attach \"SpeakingFeedbackPanel\" to its corresponding gameobject Attach \"Interactable\" to the parent gameobject we created in step (3) \"MyInteractable\" can be left empty, see Advanced section below for its usage You want to get the following setup (6) Lastly, for the UI to take effect On XR Origin (XR Rig) , attach the \"InputActionManager\" preset to the component You want to get the following setup Now you should be good to use the system - hit play and make sure the result matches exactly to that of the \"Get Started\" section Custom Scene To create a custom scene, follow steps 2-5 in the tutorial. The Voice2Action system filters objects by making the unmatched objects transparent, so if your object's material is non-transparent, they might still show (visually), but not on the Expand Panel Advanced - UI Customization Interactables By default, all interactable objects are grouped under a parent game object. This enables the system to specify different groups of objects types by their names, the following image shows the example in \"Samples/CityDemo\". My Interactables User can customizably define how they wish to detect objects as well. For example, in \"Samples/CityDemo\", we use MyInteractables as entry for detecting landmarks, which is used to call objects located in a specific area. The is very flexible as user can override all behaviors of this gameobject by simply attaching it to the serialize field of VoiceIntentController . For example, we can use tags, materials, positions to detect objects, just to name a few. Expand Panel The Expand Panel is used to store the objects you've called that will be \"expanded\" in front of you. When you highlight over an object that is presented to you in the expand panel, it will show a raycast indicating the location of the object as well as general information of the object. Advanced - LLMs Customization The user can customizably define their own classes and functions for broader interaction categories. You want to write code that follows the instructions exactly as specified as follows - reflection is used for the system to perform its core functionality, and it would be quite hard to debug (although we provide extensive error prevention) if you did them wrong. You can open \"Samples/CityDemo\" and play around with it to better understand the system. Make sure to follow step (6) in the tutorial for the UI to take effect Custom Actions Go to Voice2Action > PropertyController (Game Object) . Write atomic functions by inheriting \"Embeddings.cs\" and \"ShapeController.cs\" classes Example usage can be found in \"Samples/CityDemo/Scripts/MyEmbeddings.cs\" and \"Samples/CityDemo/Scripts/MyShapeController.cs\" Attach this customized \"PropertyController\" to Voice2Action > VoiceIntentController (Game Object) > VoiceIntentController (Scripts) > CustomAction to take effect. When the scene starts, \"MyShapeController\" field will become None (on purpose), which indicates success. Example: LandMark In order to call an object near certain street, we want to specify where the boundaries that street is by writing atomic functions that define \"boundaries\". \"MyEmbeddings.cs\" is used to initialize where the landmarks are and store them in a publicly available data structure (like a dictionary, for example) \"MyShapeController.cs: is used to write functions that specify what it means by \"object is within current landmark's boundary\" Now, when the user calls for objects near Main Street, it will call all the objects that are near the strip of land shown below Custom Properties In order for the LLMs to perform accruate actions, the user can choose to add few-shot examples to demonstrate how to call each action, including but not limited to class/function/atomic action description, constraints, execution orders and confidence thresholds. Property Classifier An example customization of the \"LLM for Classification\" step implemented in \"Samples/CityDemo\", e.g. does user instruction contains selection or modification? Instruction must contain \"{}\" for property insertion. Lower orders indicate higher priorities. Indicators are used to specify constraints or remarks of the properties. User can either declare properties in the Unity hierarchy directly, or do so with code by overriding \"Embeddings.Init(My)Interactables(...)\", see \"Samples/CityDemo/Scripts/MyEmbeddings.cs\" for more details. Property Extractor An example customization of the \"LLM for Extraction\" step implemented in \"Samples/CityDemo\". The hierarchy follows \"LLM for Classification\". Propety Executor An example customization of the \"LLM for Execution\" step implemented in \"Samples/CityDemo\". This is not required but will likely improve execution success rate. params are used to declare parameter types and their example usages. Advantages Efficiency: Extremely Low Cost Based on our testing in the \"Samples/CityDemo\" with 2 ** (7+3) = 1024 function call combinations (with infinite argument combinations) and 100 * 32 = 3.2k user interaction (including multi-turn due to execution failure), our OpenAI API (with gpt-3.5-turbo) total cost ~= 5 USD, which converts to 0.16 cents per interaction! Domain Adaptation: Highly Customizable User can customize their actions and properties by easily inheriting our Runtime scripts, see examples in the Advanced section for more details. We can also fine-tune our models based on domain-specific manipulation category requirements, stay tuned! Scalability: Highly Parallelizable While the current package is a minimal implementation of the full Voice2Action framework, all property classes can do their jobs in parallel without any intervention as they belongs to different manipulation categories. More importantly, by adapting Unity (Unreal, or other game engine) functional impact analysis (including controlled experiments, parameterized testing, dependency analysis and profiling ), we are able to integrate the LLMs function calling and feedback ability into Unity runtime, while maintaining the parallelizability of each scripting and rendering components, hence this package is an initial attempt as a multi-agent collaboration framework for game engine code execution. Limitations and Future Works The current Voice2Action package only supports inference , i.e. you cannot fine-tune your model based on domain-specific action types. We plan to open source that in future versions. We plan to decouple the LLM feature and the Expand feature into different packages in future versions. References For the source of the Expand functionality, go to 3D User Interfaces: Theory and Practice For the reference to the original Expand paper, go to Dense and Dynamic 3D Selction for Game-Based Virtual Environment - Cashion et al. (2012) For the reference to the original Voice2Action paper, go to Voice2Action GitHub Repository (Paper & Package)"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| XRC Students Voice2Action",
    "keywords": "MIT License Copyright (c) 2023 Yang Su Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "license/Third Party Notices.html": {
    "href": "license/Third Party Notices.html",
    "title": "This package contains third-party software components governed by the license(s) indicated below: | XRC Students Voice2Action",
    "keywords": "This package contains third-party software components governed by the license(s) indicated below: None"
  }
}